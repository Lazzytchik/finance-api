// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protobuf/finances/schema.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Finances_IncomeAdd_FullMethodName = "/helloworld.Finances/IncomeAdd"
	Finances_SpendAdd_FullMethodName  = "/helloworld.Finances/SpendAdd"
	Finances_MonthStat_FullMethodName = "/helloworld.Finances/MonthStat"
)

// FinancesClient is the client API for Finances service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type FinancesClient interface {
	IncomeAdd(ctx context.Context, in *IncomeAddRequest, opts ...grpc.CallOption) (*IncomeAddReply, error)
	SpendAdd(ctx context.Context, in *SpendAddRequest, opts ...grpc.CallOption) (*SpendAddReply, error)
	MonthStat(ctx context.Context, in *MonthStatRequest, opts ...grpc.CallOption) (*MonthStatReply, error)
}

type financesClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancesClient(cc grpc.ClientConnInterface) FinancesClient {
	return &financesClient{cc}
}

func (c *financesClient) IncomeAdd(ctx context.Context, in *IncomeAddRequest, opts ...grpc.CallOption) (*IncomeAddReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IncomeAddReply)
	err := c.cc.Invoke(ctx, Finances_IncomeAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financesClient) SpendAdd(ctx context.Context, in *SpendAddRequest, opts ...grpc.CallOption) (*SpendAddReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SpendAddReply)
	err := c.cc.Invoke(ctx, Finances_SpendAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financesClient) MonthStat(ctx context.Context, in *MonthStatRequest, opts ...grpc.CallOption) (*MonthStatReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonthStatReply)
	err := c.cc.Invoke(ctx, Finances_MonthStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancesServer is the server API for Finances service.
// All implementations must embed UnimplementedFinancesServer
// for forward compatibility.
//
// The greeting service definition.
type FinancesServer interface {
	IncomeAdd(context.Context, *IncomeAddRequest) (*IncomeAddReply, error)
	SpendAdd(context.Context, *SpendAddRequest) (*SpendAddReply, error)
	MonthStat(context.Context, *MonthStatRequest) (*MonthStatReply, error)
	mustEmbedUnimplementedFinancesServer()
}

// UnimplementedFinancesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinancesServer struct{}

func (UnimplementedFinancesServer) IncomeAdd(context.Context, *IncomeAddRequest) (*IncomeAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomeAdd not implemented")
}
func (UnimplementedFinancesServer) SpendAdd(context.Context, *SpendAddRequest) (*SpendAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpendAdd not implemented")
}
func (UnimplementedFinancesServer) MonthStat(context.Context, *MonthStatRequest) (*MonthStatReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonthStat not implemented")
}
func (UnimplementedFinancesServer) mustEmbedUnimplementedFinancesServer() {}
func (UnimplementedFinancesServer) testEmbeddedByValue()                  {}

// UnsafeFinancesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancesServer will
// result in compilation errors.
type UnsafeFinancesServer interface {
	mustEmbedUnimplementedFinancesServer()
}

func RegisterFinancesServer(s grpc.ServiceRegistrar, srv FinancesServer) {
	// If the following call pancis, it indicates UnimplementedFinancesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Finances_ServiceDesc, srv)
}

func _Finances_IncomeAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancesServer).IncomeAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finances_IncomeAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancesServer).IncomeAdd(ctx, req.(*IncomeAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Finances_SpendAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancesServer).SpendAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finances_SpendAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancesServer).SpendAdd(ctx, req.(*SpendAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Finances_MonthStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonthStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancesServer).MonthStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Finances_MonthStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancesServer).MonthStat(ctx, req.(*MonthStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Finances_ServiceDesc is the grpc.ServiceDesc for Finances service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Finances_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Finances",
	HandlerType: (*FinancesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncomeAdd",
			Handler:    _Finances_IncomeAdd_Handler,
		},
		{
			MethodName: "SpendAdd",
			Handler:    _Finances_SpendAdd_Handler,
		},
		{
			MethodName: "MonthStat",
			Handler:    _Finances_MonthStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/finances/schema.proto",
}
